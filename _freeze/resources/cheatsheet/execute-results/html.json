{
  "hash": "a11b8bf47960ab8d4ffd960727d6830b",
  "result": {
    "markdown": "---\ntitle: \"Gov 50 Cheat Sheet\"\nslug: cheatsheet\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(gov50data)\n```\n:::\n\n\n\n## R Basics (Week 1)\n\n### Creating a vector \n\nYou can create a vector using the `c` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Any R code that begins with the # character is a comment\n## Comments are ignored by R\n\nmy_numbers <- c(4, 8, 15, 16, 23, 42) # Anything after # is also a\n# comment\nmy_numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  4  8 15 16 23 42\n```\n:::\n:::\n\n\n\n### Installing and loading a package\n\nYou can install a package with the `install.packages` function, passing the name of the package to be installed as a string (that is, in quotes):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"ggplot2\")\n```\n:::\n\n\nYou can load a package into the R environment by calling `library()` with the name of package without quotes. You should only have one package per library call. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n### Calling functions from specific packages\n\nWe can also use the `mypackage::` prefix to access package functions without loading:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(head(mtcars))\n```\n\n::: {.cell-output-display}\n|                  |  mpg| cyl| disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|:-----------------|----:|---:|----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n|Mazda RX4         | 21.0|   6|  160| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n|Mazda RX4 Wag     | 21.0|   6|  160| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n|Datsun 710        | 22.8|   4|  108|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|\n|Hornet 4 Drive    | 21.4|   6|  258| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|\n|Hornet Sportabout | 18.7|   8|  360| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|\n|Valiant           | 18.1|   6|  225| 105| 2.76| 3.460| 20.22|  1|  0|    3|    1|\n:::\n:::\n\n\n## Data Visualization (Week 2)\n\n### Scatter plot\n\nYou can produce a scatter plot with using the `x` and `y` aesthetics along with the `geom_point()` function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n### Smoothed curves \n\nYou can add a smoothed curve that summarizes the relationship between two variables with the `geom_smooth()` function. By default, it uses a  loess smoother to estimated the conditional mean of the y-axis variable as a function of the x-axis variable. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() + geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n### Adding a regression line \n\n`geom_smooth` can also add a regression line by setting the argument `method = \"lm\"` and we can turn off the shaded regions around the line with `se = FALSE`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() + geom_smooth(method = \"lm\", se = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### Changing the scale of the axes\n\nIf we want the scale of the x-axis to be logged to stretch out the data we can use the `scale_x_log10()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_x_log10()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### Adding informative labels to a plot\n\nUse the `labs()` to add informative labels to the plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point() +\n  geom_smooth(method = \"loess\", se = FALSE) +\n  scale_x_log10() +\n  labs(x = \"Population Density\",\n       y = \"Percent of County Below Poverty Line\",\n       title = \"Poverty and Population Density\",\n       subtitle = \"Among Counties in the Midwest\",\n       source = \"US Census, 2000\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/labels-1.png){width=672}\n:::\n:::\n\n\n### Mapping aesthetics to variables\n\nIf you would like to map an aesthetic to a variable for all geoms in the plot, you can put it in the `aes` call in the `ggplot()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty,\n                     color = state,\n                     fill = state)) +\n  geom_point() +\n  geom_smooth() +\n  scale_x_log10()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n### Mapping aesthetics for a single geom\n\nYou can also map aesthetics for a specific geom using the `mapping` argument to that function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point(mapping = aes(color = state)) +\n  geom_smooth(color = \"black\") +\n  scale_x_log10()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### Setting the aesthetics for all observations\n\nIf you would like to set the color or size or shape of a geom for all data points (that is, not mapped to any variables), be sure to set these outside of `aes()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = popdensity,\n                     y = percbelowpoverty)) +\n  geom_point(color = \"purple\") +\n  geom_smooth() +\n  scale_x_log10()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### Histograms\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = midwest,\n       mapping = aes(x = percbelowpoverty)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/histogram-1.png){width=672}\n:::\n:::\n\n\n\n## Data Wrangling (week 2-3)\n\n### Subsetting a data frame\n\nUse the `filter()` function from the `dplyr` package to subset a data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gov50data)\n\nnews |>\n  filter(weekday == \"Tue\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 509 × 10\n   callsign affiliation date       weekday ideology national_politics\n   <chr>    <chr>       <date>     <ord>      <dbl>             <dbl>\n 1 KAEF     ABC         2017-06-13 Tue      0.0242              0.180\n 2 KBVU     FOX         2017-06-13 Tue      0.00894             0.186\n 3 KBZK     CBS         2017-06-13 Tue      0.129               0.306\n 4 KCVU     FOX         2017-06-13 Tue      0.114               0.124\n 5 KECI     NBC         2017-06-13 Tue      0.115               0.283\n 6 KHSL     CBS         2017-06-13 Tue      0.0821              0.274\n 7 KNVN     NBC         2017-06-13 Tue      0.120               0.261\n 8 KPAX     CBS         2017-06-13 Tue      0.0984              0.208\n 9 KRCR     ABC         2017-06-13 Tue      0.0187              0.206\n10 KTMF     ABC         2017-06-13 Tue      0.233               0.101\n# ℹ 499 more rows\n# ℹ 4 more variables: local_politics <dbl>, sinclair2017 <dbl>, post <dbl>,\n#   month <ord>\n```\n:::\n:::\n\n\n\nYou can filter based on multiple conditions to subset to the rows that meet all conditions:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  filter(weekday == \"Tue\",\n         affiliation == \"FOX\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 70 × 10\n   callsign affiliation date       weekday ideology national_politics\n   <chr>    <chr>       <date>     <ord>      <dbl>             <dbl>\n 1 KBVU     FOX         2017-06-13 Tue      0.00894            0.186 \n 2 KCVU     FOX         2017-06-13 Tue      0.114              0.124 \n 3 WEMT     FOX         2017-06-13 Tue      0.235              0.149 \n 4 WYDO     FOX         2017-06-13 Tue      0.0949             0.182 \n 5 WEMT     FOX         2017-06-20 Tue      0.268              0.134 \n 6 WYDO     FOX         2017-06-20 Tue      0.0590             0.155 \n 7 WEMT     FOX         2017-06-27 Tue      0.0457             0.164 \n 8 WYDO     FOX         2017-06-27 Tue     -0.0588             0.147 \n 9 WEMT     FOX         2017-07-04 Tue      0.0801             0.0986\n10 WYDO     FOX         2017-07-04 Tue      0.0555             0.0910\n# ℹ 60 more rows\n# ℹ 4 more variables: local_politics <dbl>, sinclair2017 <dbl>, post <dbl>,\n#   month <ord>\n```\n:::\n:::\n\n\n\nYou can use the `|` operator to match one of two conditions (\"OR\" rather than \"AND\"):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  filter(affiliation == \"FOX\" | affiliation == \"ABC\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,033 × 10\n   callsign affiliation date       weekday  ideology national_politics\n   <chr>    <chr>       <date>     <ord>       <dbl>             <dbl>\n 1 KTMF     ABC         2017-06-07 Wed      0.0842              0.152 \n 2 KTXS     ABC         2017-06-07 Wed     -0.000488            0.0925\n 3 KAEF     ABC         2017-06-08 Thu      0.0426              0.213 \n 4 KBVU     FOX         2017-06-08 Thu     -0.0860              0.169 \n 5 KTMF     ABC         2017-06-08 Thu      0.0433              0.179 \n 6 KTXS     ABC         2017-06-08 Thu      0.0627              0.158 \n 7 WCTI     ABC         2017-06-08 Thu      0.139               0.225 \n 8 KAEF     ABC         2017-06-09 Fri      0.0870              0.153 \n 9 KTXS     ABC         2017-06-09 Fri      0.0879              0.0790\n10 WCTI     ABC         2017-06-09 Fri      0.0667              0.182 \n# ℹ 1,023 more rows\n# ℹ 4 more variables: local_politics <dbl>, sinclair2017 <dbl>, post <dbl>,\n#   month <ord>\n```\n:::\n:::\n\n\nTo test if a variable is one of several possible values, you can also use the `%in%` command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  filter(weekday %in% c(\"Mon\", \"Fri\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,021 × 10\n   callsign affiliation date       weekday ideology national_politics\n   <chr>    <chr>       <date>     <ord>      <dbl>             <dbl>\n 1 KAEF     ABC         2017-06-09 Fri       0.0870            0.153 \n 2 KECI     NBC         2017-06-09 Fri       0.115             0.216 \n 3 KPAX     CBS         2017-06-09 Fri       0.0882            0.315 \n 4 KRBC     NBC         2017-06-09 Fri       0.0929            0.152 \n 5 KTAB     CBS         2017-06-09 Fri       0.0588            0.0711\n 6 KTXS     ABC         2017-06-09 Fri       0.0879            0.0790\n 7 WCTI     ABC         2017-06-09 Fri       0.0667            0.182 \n 8 WITN     NBC         2017-06-09 Fri      -0.0683            0.146 \n 9 WNCT     CBS         2017-06-09 Fri      -0.0181            0.126 \n10 WYDO     FOX         2017-06-09 Fri      -0.0330            0.0802\n# ℹ 1,011 more rows\n# ℹ 4 more variables: local_politics <dbl>, sinclair2017 <dbl>, post <dbl>,\n#   month <ord>\n```\n:::\n:::\n\n\nIf you want to subset to a set of specific row numbers, you can use the `slice` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## subset to the first 5 rows\nnews |>\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 10\n  callsign affiliation date       weekday ideology national_politics\n  <chr>    <chr>       <date>     <ord>      <dbl>             <dbl>\n1 KECI     NBC         2017-06-07 Wed       0.0655            0.225 \n2 KPAX     CBS         2017-06-07 Wed       0.0853            0.283 \n3 KRBC     NBC         2017-06-07 Wed       0.0183            0.130 \n4 KTAB     CBS         2017-06-07 Wed       0.0850            0.0901\n5 KTMF     ABC         2017-06-07 Wed       0.0842            0.152 \n# ℹ 4 more variables: local_politics <dbl>, sinclair2017 <dbl>, post <dbl>,\n#   month <ord>\n```\n:::\n:::\n\n\n\nHere the `1:5` syntax tells R to produce a vector that starts at 1 and ends at 5, incrementing by 1:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\n\n### Filtering to the largest/smallest values of a variable\n\nTo subset to the rows that have the largest or smallest values of a given variable, use the `slice_max` and `slice_max` functions. For the largest  values, use `slice_max` and use the `n` argument to specify how many rows you want:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  slice_max(ideology, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 10\n  callsign affiliation date       weekday ideology national_politics\n  <chr>    <chr>       <date>     <ord>      <dbl>             <dbl>\n1 KAEF     ABC         2017-06-19 Mon        0.778            0.0823\n2 WYDO     FOX         2017-07-19 Wed        0.580            0.126 \n3 KRCR     ABC         2017-10-03 Tue        0.566            0.123 \n4 KAEF     ABC         2017-10-18 Wed        0.496            0.0892\n5 KBVU     FOX         2017-11-16 Thu        0.491            0.159 \n# ℹ 4 more variables: local_politics <dbl>, sinclair2017 <dbl>, post <dbl>,\n#   month <ord>\n```\n:::\n:::\n\n\nTo get lowest values, use `slice_min`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  slice_min(ideology, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 10\n  callsign affiliation date       weekday ideology national_politics\n  <chr>    <chr>       <date>     <ord>      <dbl>             <dbl>\n1 KRBC     NBC         2017-10-19 Thu       -0.674            0.0731\n2 WJHL     CBS         2017-12-08 Fri       -0.673            0.0364\n3 KRBC     NBC         2017-10-18 Wed       -0.586            0.0470\n4 KCVU     FOX         2017-06-22 Thu       -0.414            0.158 \n5 KRBC     NBC         2017-12-11 Mon       -0.365            0.0674\n# ℹ 4 more variables: local_politics <dbl>, sinclair2017 <dbl>, post <dbl>,\n#   month <ord>\n```\n:::\n:::\n\n\n\n### Sorting rows by a variable\n\nYou can sort the rows of a data set using the `arrange()` function. By default, this will sort the rows from smallest to largest. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  arrange(ideology)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,560 × 10\n   callsign affiliation date       weekday ideology national_politics\n   <chr>    <chr>       <date>     <ord>      <dbl>             <dbl>\n 1 KRBC     NBC         2017-10-19 Thu       -0.674            0.0731\n 2 WJHL     CBS         2017-12-08 Fri       -0.673            0.0364\n 3 KRBC     NBC         2017-10-18 Wed       -0.586            0.0470\n 4 KCVU     FOX         2017-06-22 Thu       -0.414            0.158 \n 5 KRBC     NBC         2017-12-11 Mon       -0.365            0.0674\n 6 KAEF     ABC         2017-06-21 Wed       -0.315            0.130 \n 7 KTMF     ABC         2017-12-01 Fri       -0.303            0.179 \n 8 KWYB     ABC         2017-12-01 Fri       -0.303            0.160 \n 9 KTVM     NBC         2017-09-01 Fri       -0.302            0.0507\n10 KNVN     NBC         2017-12-08 Fri       -0.299            0.121 \n# ℹ 2,550 more rows\n# ℹ 4 more variables: local_politics <dbl>, sinclair2017 <dbl>, post <dbl>,\n#   month <ord>\n```\n:::\n:::\n\n\nIf you would like to sort the rows from largest to smallest (descending order), you can wrap the variable name with `desc()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  arrange(desc(ideology))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,560 × 10\n   callsign affiliation date       weekday ideology national_politics\n   <chr>    <chr>       <date>     <ord>      <dbl>             <dbl>\n 1 KAEF     ABC         2017-06-19 Mon        0.778            0.0823\n 2 WYDO     FOX         2017-07-19 Wed        0.580            0.126 \n 3 KRCR     ABC         2017-10-03 Tue        0.566            0.123 \n 4 KAEF     ABC         2017-10-18 Wed        0.496            0.0892\n 5 KBVU     FOX         2017-11-16 Thu        0.491            0.159 \n 6 KTMF     ABC         2017-11-06 Mon        0.455            0.138 \n 7 KAEF     ABC         2017-06-29 Thu        0.447            0.126 \n 8 KPAX     CBS         2017-11-23 Thu        0.437            0.125 \n 9 KTAB     CBS         2017-11-16 Thu        0.427            0.0631\n10 KCVU     FOX         2017-07-06 Thu        0.406            0.154 \n# ℹ 2,550 more rows\n# ℹ 4 more variables: local_politics <dbl>, sinclair2017 <dbl>, post <dbl>,\n#   month <ord>\n```\n:::\n:::\n\n\n\n### Selecting/subsetting the columns\n\nYou can subset the data to only certain columns using the `select()` command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  select(callsign, date, ideology)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,560 × 3\n   callsign date        ideology\n   <chr>    <date>         <dbl>\n 1 KECI     2017-06-07  0.0655  \n 2 KPAX     2017-06-07  0.0853  \n 3 KRBC     2017-06-07  0.0183  \n 4 KTAB     2017-06-07  0.0850  \n 5 KTMF     2017-06-07  0.0842  \n 6 KTXS     2017-06-07 -0.000488\n 7 KAEF     2017-06-08  0.0426  \n 8 KBVU     2017-06-08 -0.0860  \n 9 KECI     2017-06-08  0.0902  \n10 KPAX     2017-06-08  0.0668  \n# ℹ 2,550 more rows\n```\n:::\n:::\n\n\nIf you want to select a range of columns from, say, `callsign` to `ideology`, you can use the `:` operator:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  select(callsign:ideology)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,560 × 5\n   callsign affiliation date       weekday  ideology\n   <chr>    <chr>       <date>     <ord>       <dbl>\n 1 KECI     NBC         2017-06-07 Wed      0.0655  \n 2 KPAX     CBS         2017-06-07 Wed      0.0853  \n 3 KRBC     NBC         2017-06-07 Wed      0.0183  \n 4 KTAB     CBS         2017-06-07 Wed      0.0850  \n 5 KTMF     ABC         2017-06-07 Wed      0.0842  \n 6 KTXS     ABC         2017-06-07 Wed     -0.000488\n 7 KAEF     ABC         2017-06-08 Thu      0.0426  \n 8 KBVU     FOX         2017-06-08 Thu     -0.0860  \n 9 KECI     NBC         2017-06-08 Thu      0.0902  \n10 KPAX     CBS         2017-06-08 Thu      0.0668  \n# ℹ 2,550 more rows\n```\n:::\n:::\n\n\nYou can remove a variable from the data set by using the minus sign `-` in front of it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  select(-callsign)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,560 × 9\n   affiliation date       weekday  ideology national_politics local_politics\n   <chr>       <date>     <ord>       <dbl>             <dbl>          <dbl>\n 1 NBC         2017-06-07 Wed      0.0655              0.225          0.148 \n 2 CBS         2017-06-07 Wed      0.0853              0.283          0.123 \n 3 NBC         2017-06-07 Wed      0.0183              0.130          0.189 \n 4 CBS         2017-06-07 Wed      0.0850              0.0901         0.138 \n 5 ABC         2017-06-07 Wed      0.0842              0.152          0.129 \n 6 ABC         2017-06-07 Wed     -0.000488            0.0925         0.0791\n 7 ABC         2017-06-08 Thu      0.0426              0.213          0.228 \n 8 FOX         2017-06-08 Thu     -0.0860              0.169          0.247 \n 9 NBC         2017-06-08 Thu      0.0902              0.276          0.152 \n10 CBS         2017-06-08 Thu      0.0668              0.305          0.124 \n# ℹ 2,550 more rows\n# ℹ 3 more variables: sinclair2017 <dbl>, post <dbl>, month <ord>\n```\n:::\n:::\n\n\nYou can also drop several variables using the `c()` function or the `(a:b)` syntax:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  select(-c(callsign, date, ideology))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,560 × 7\n   affiliation weekday national_politics local_politics sinclair2017  post month\n   <chr>       <ord>               <dbl>          <dbl>        <dbl> <dbl> <ord>\n 1 NBC         Wed                0.225          0.148             1     0 Jun  \n 2 CBS         Wed                0.283          0.123             0     0 Jun  \n 3 NBC         Wed                0.130          0.189             0     0 Jun  \n 4 CBS         Wed                0.0901         0.138             0     0 Jun  \n 5 ABC         Wed                0.152          0.129             0     0 Jun  \n 6 ABC         Wed                0.0925         0.0791            1     0 Jun  \n 7 ABC         Thu                0.213          0.228             1     0 Jun  \n 8 FOX         Thu                0.169          0.247             1     0 Jun  \n 9 NBC         Thu                0.276          0.152             1     0 Jun  \n10 CBS         Thu                0.305          0.124             0     0 Jun  \n# ℹ 2,550 more rows\n```\n:::\n\n```{.r .cell-code}\nnews |>\n  select(-(callsign:ideology))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,560 × 5\n   national_politics local_politics sinclair2017  post month\n               <dbl>          <dbl>        <dbl> <dbl> <ord>\n 1            0.225          0.148             1     0 Jun  \n 2            0.283          0.123             0     0 Jun  \n 3            0.130          0.189             0     0 Jun  \n 4            0.0901         0.138             0     0 Jun  \n 5            0.152          0.129             0     0 Jun  \n 6            0.0925         0.0791            1     0 Jun  \n 7            0.213          0.228             1     0 Jun  \n 8            0.169          0.247             1     0 Jun  \n 9            0.276          0.152             1     0 Jun  \n10            0.305          0.124             0     0 Jun  \n# ℹ 2,550 more rows\n```\n:::\n:::\n\n\n\nYou can also select columns based on matching patterns in the names with functions like `starts_with()` or `ends_with()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  select(ends_with(\"politics\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,560 × 2\n   national_politics local_politics\n               <dbl>          <dbl>\n 1            0.225          0.148 \n 2            0.283          0.123 \n 3            0.130          0.189 \n 4            0.0901         0.138 \n 5            0.152          0.129 \n 6            0.0925         0.0791\n 7            0.213          0.228 \n 8            0.169          0.247 \n 9            0.276          0.152 \n10            0.305          0.124 \n# ℹ 2,550 more rows\n```\n:::\n:::\n\n\n\nThis code finds all variables with column names that end with the string \"politics\". See the [help page for `select()`](https://dplyr.tidyverse.org/reference/select.html) for more information on different ways to select. \n\n\n### Renaming a variable \n\nYou can rename a variable useing the function `rename(new_name = old_name)`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  rename(call_sign = callsign)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,560 × 10\n   call_sign affiliation date       weekday  ideology national_politics\n   <chr>     <chr>       <date>     <ord>       <dbl>             <dbl>\n 1 KECI      NBC         2017-06-07 Wed      0.0655              0.225 \n 2 KPAX      CBS         2017-06-07 Wed      0.0853              0.283 \n 3 KRBC      NBC         2017-06-07 Wed      0.0183              0.130 \n 4 KTAB      CBS         2017-06-07 Wed      0.0850              0.0901\n 5 KTMF      ABC         2017-06-07 Wed      0.0842              0.152 \n 6 KTXS      ABC         2017-06-07 Wed     -0.000488            0.0925\n 7 KAEF      ABC         2017-06-08 Thu      0.0426              0.213 \n 8 KBVU      FOX         2017-06-08 Thu     -0.0860              0.169 \n 9 KECI      NBC         2017-06-08 Thu      0.0902              0.276 \n10 KPAX      CBS         2017-06-08 Thu      0.0668              0.305 \n# ℹ 2,550 more rows\n# ℹ 4 more variables: local_politics <dbl>, sinclair2017 <dbl>, post <dbl>,\n#   month <ord>\n```\n:::\n:::\n\n\n\n### Creating new variables \n\nYou can create new variables that are functions of old variables using the `mutate()` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |> mutate(\n  national_local_diff = national_politics - local_politics) |>\n  select(callsign, date, national_politics, local_politics,\n         national_local_diff)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,560 × 5\n   callsign date       national_politics local_politics national_local_diff\n   <chr>    <date>                 <dbl>          <dbl>               <dbl>\n 1 KECI     2017-06-07            0.225          0.148               0.0761\n 2 KPAX     2017-06-07            0.283          0.123               0.160 \n 3 KRBC     2017-06-07            0.130          0.189              -0.0589\n 4 KTAB     2017-06-07            0.0901         0.138              -0.0476\n 5 KTMF     2017-06-07            0.152          0.129               0.0229\n 6 KTXS     2017-06-07            0.0925         0.0791              0.0134\n 7 KAEF     2017-06-08            0.213          0.228              -0.0151\n 8 KBVU     2017-06-08            0.169          0.247              -0.0781\n 9 KECI     2017-06-08            0.276          0.152               0.124 \n10 KPAX     2017-06-08            0.305          0.124               0.180 \n# ℹ 2,550 more rows\n```\n:::\n:::\n\n\n\n### Creating new variables based on yes/no conditions\n\nIf you want to create a new variable that can take on two values based on a logical conditional, you should use the `if_else()` function inside of `mutate()`. For instance, if we want to create a more nicely labeled version of the `sinclair2017` variable (which is 0/1), we could do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  mutate(Ownership = if_else(sinclair2017 == 1,\n                             \"Acquired by Sinclair\",\n                             \"Not Acquired\")) |>\n  select(callsign, affiliation, date, sinclair2017, Ownership)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2,560 × 5\n   callsign affiliation date       sinclair2017 Ownership           \n   <chr>    <chr>       <date>            <dbl> <chr>               \n 1 KECI     NBC         2017-06-07            1 Acquired by Sinclair\n 2 KPAX     CBS         2017-06-07            0 Not Acquired        \n 3 KRBC     NBC         2017-06-07            0 Not Acquired        \n 4 KTAB     CBS         2017-06-07            0 Not Acquired        \n 5 KTMF     ABC         2017-06-07            0 Not Acquired        \n 6 KTXS     ABC         2017-06-07            1 Acquired by Sinclair\n 7 KAEF     ABC         2017-06-08            1 Acquired by Sinclair\n 8 KBVU     FOX         2017-06-08            1 Acquired by Sinclair\n 9 KECI     NBC         2017-06-08            1 Acquired by Sinclair\n10 KPAX     CBS         2017-06-08            0 Not Acquired        \n# ℹ 2,550 more rows\n```\n:::\n:::\n\n\n\n### Summarizing a variable \n\nYou can calculate summaries of variables in the data set using the `summarize()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  summarize(\n    avg_ideology = mean(ideology),\n    sd_ideology = sd(ideology),\n    median_ideology = median(ideology)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  avg_ideology sd_ideology median_ideology\n         <dbl>       <dbl>           <dbl>\n1       0.0907      0.0962          0.0929\n```\n:::\n:::\n\n\n\n\n### Summarizing variables by groups of rows\n\nBy default, `summarize()` calculates the summaries of variables for all rows in the data frame. You can also calculate these summaries within groups of rows defined by another variable in the data frame using the `group_by()` function before summarizing. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  group_by(month) |>\n  summarize(\n    avg_ideology = mean(ideology),\n    sd_ideology = sd(ideology),\n    median_ideology = median(ideology)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 4\n  month avg_ideology sd_ideology median_ideology\n  <ord>        <dbl>       <dbl>           <dbl>\n1 Jun         0.0786      0.0979          0.0838\n2 Jul         0.103       0.0888          0.0992\n3 Aug         0.105       0.0811          0.106 \n4 Sep         0.0751      0.0902          0.0768\n5 Oct         0.0862      0.110           0.0853\n6 Nov         0.0972      0.0893          0.102 \n7 Dec         0.0774      0.125           0.0878\n```\n:::\n:::\n\n\nHere, the `summarize()` function breaks apart the original data into smaller data frames for each month and applies the summary functions to those, then combines everything into one tibble. \n\n\n### Summarizing by multiple variables\n\nYou can group by multiple variables and `summarize()` will create groups based on every combination of each variable: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  group_by(sinclair2017, post) |>\n  summarize(\n    avg_ideology = mean(ideology)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'sinclair2017'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n# Groups:   sinclair2017 [2]\n  sinclair2017  post avg_ideology\n         <dbl> <dbl>        <dbl>\n1            0     0       0.100 \n2            0     1       0.0768\n3            1     0       0.0936\n4            1     1       0.0938\n```\n:::\n:::\n\n\nYou'll notice the message that `summarize()` sends after using to let us know that resulting tibble is grouped by `sinclair2017`. By default, `summarize()` drops the last group you provided in `group_by` (`post` in this case).  This isn't an error message, it's just letting us know some helpful information. If you want to avoid this messaging displaying, you need to specify what grouping you want after using the `.groups` argument:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  group_by(sinclair2017, post) |>\n  summarize(\n    avg_ideology = mean(ideology),\n    .groups = \"drop_last\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 3\n# Groups:   sinclair2017 [2]\n  sinclair2017  post avg_ideology\n         <dbl> <dbl>        <dbl>\n1            0     0       0.100 \n2            0     1       0.0768\n3            1     0       0.0936\n4            1     1       0.0938\n```\n:::\n:::\n\n\n\n### Summarizing across many variables\n\n\nIf you want to apply the same summary to multiple variables, you can use the `across(vars, fun)` function, where `vars` is a vector of variable names (specified like with `select()`) and `fun` is a summary function to apply to those variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  group_by(sinclair2017, post) |>\n  summarize(\n    across(c(ideology, national_politics), mean)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'sinclair2017'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 4\n# Groups:   sinclair2017 [2]\n  sinclair2017  post ideology national_politics\n         <dbl> <dbl>    <dbl>             <dbl>\n1            0     0   0.100              0.134\n2            0     1   0.0768             0.126\n3            1     0   0.0936             0.137\n4            1     1   0.0938             0.155\n```\n:::\n:::\n\n\nAs with `select()`, you can use the `:` operator to select a range of variables \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  group_by(sinclair2017, post) |>\n  summarize(\n    across(ideology:local_politics, mean)\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'sinclair2017'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 5\n# Groups:   sinclair2017 [2]\n  sinclair2017  post ideology national_politics local_politics\n         <dbl> <dbl>    <dbl>             <dbl>          <dbl>\n1            0     0   0.100              0.134          0.168\n2            0     1   0.0768             0.126          0.167\n3            1     0   0.0936             0.137          0.157\n4            1     1   0.0938             0.155          0.139\n```\n:::\n:::\n\n\n\n### Table of counts of a categorical variable\n\nThere are two way to produce a table of counts of each category of a variable. The first is to use `group_by` and `summarize` along with the summary function `n()`, which returns the numbers of rows in each grouping (that is, each combination of the grouping variables):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  group_by(affiliation) |>\n  summarize(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  affiliation     n\n  <chr>       <int>\n1 ABC           687\n2 CBS           758\n3 FOX           346\n4 NBC           769\n```\n:::\n:::\n\n\nA simpler way to acheive the same outcome is to use the `count()` function, which implements these two steps:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  count(affiliation)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 2\n  affiliation     n\n  <chr>       <int>\n1 ABC           687\n2 CBS           758\n3 FOX           346\n4 NBC           769\n```\n:::\n:::\n\n\n\n\n\n### Producing nicely formatted tables with `kable()`\n\nYou can take any tibble in R and convert it into a more readable output by passing it to `knitr::kable()`. In our homework, generally, we will save the tibble as an object and then pass it to this function. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth_summary <- news |>\n  group_by(month) |>\n  summarize(\n    avg_ideology = mean(ideology),\n    sd_ideology = sd(ideology)\n  )\n\nknitr::kable(month_summary)\n```\n\n::: {.cell-output-display}\n|month | avg_ideology| sd_ideology|\n|:-----|------------:|-----------:|\n|Jun   |    0.0785518|   0.0979339|\n|Jul   |    0.1032917|   0.0888328|\n|Aug   |    0.1049908|   0.0811141|\n|Sep   |    0.0751067|   0.0902003|\n|Oct   |    0.0861639|   0.1098108|\n|Nov   |    0.0971796|   0.0892845|\n|Dec   |    0.0773873|   0.1246451|\n:::\n:::\n\n\n\nYou can add informative column names to the table using the `col.names` argument. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(\n  month_summary,\n  col.names = c(\"Month\", \"Average Ideology\", \"SD of Ideology\")\n)\n```\n\n::: {.cell-output-display}\n|Month | Average Ideology| SD of Ideology|\n|:-----|----------------:|--------------:|\n|Jun   |        0.0785518|      0.0979339|\n|Jul   |        0.1032917|      0.0888328|\n|Aug   |        0.1049908|      0.0811141|\n|Sep   |        0.0751067|      0.0902003|\n|Oct   |        0.0861639|      0.1098108|\n|Nov   |        0.0971796|      0.0892845|\n|Dec   |        0.0773873|      0.1246451|\n:::\n:::\n\n\nFinally, we can round the numbers in the table to be a bit nicer using the `digits` argument. This will tell `kable()` how many significant digiits to show. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::kable(\n  month_summary,\n  col.names = c(\"Month\", \"Average Ideology\", \"SD of Ideology\"),\n  digits = 3\n)\n```\n\n::: {.cell-output-display}\n|Month | Average Ideology| SD of Ideology|\n|:-----|----------------:|--------------:|\n|Jun   |            0.079|          0.098|\n|Jul   |            0.103|          0.089|\n|Aug   |            0.105|          0.081|\n|Sep   |            0.075|          0.090|\n|Oct   |            0.086|          0.110|\n|Nov   |            0.097|          0.089|\n|Dec   |            0.077|          0.125|\n:::\n:::\n\n\n\n### Barplots of counts\n\nYou can visualize counts of a variable using a barplot:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  ggplot(mapping = aes(x = affiliation)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n\n### Barplots of other summaries \n\nWe can use barplots to visualize  other grouped summaries like means, but we need to use the `geom_col()` geom instead and specify the variable you want to be the height of the bars .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  group_by(affiliation) |>\n  summarize(\n    avg_ideology = mean(ideology)\n  ) |>\n  ggplot(mapping = aes(x = affiliation, y = avg_ideology)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n\n### Reordering/sorting barplot axes \n\nOften we want to sort the barplot axes to be in the order of the variable of interest so we can quickly compare them. We can use the `fct_reorder(group_var, ordering_var)` function to do this where the `group_var` is the grouping variable that is going on the axes and the `ordering_var` is the variable that we will sort the groups on. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  group_by(affiliation) |>\n  summarize(\n    avg_ideology = mean(ideology)\n  ) |>\n  ggplot(mapping = aes(x = fct_reorder(affiliation, avg_ideology),\n                       y = avg_ideology)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n\n### Coloring barplots by another variable \n\nYou can color the barplots by a another variable using the `fill` aesthetic:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnews |>\n  group_by(callsign, affiliation) |>\n  summarize(\n    avg_ideology = mean(ideology)\n  ) |>\n  slice_max(avg_ideology, n = 10) |>\n  ggplot(mapping = aes(y = fct_reorder(callsign, avg_ideology),\n                       x = avg_ideology)) +\n  geom_col(mapping = aes(fill = affiliation))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'callsign'. You can override using the\n`.groups` argument.\n```\n:::\n\n::: {.cell-output-display}\n![](cheatsheet_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "cheatsheet_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}